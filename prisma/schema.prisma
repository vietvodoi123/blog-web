generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  posts PostTag[]
}

model PostTag {
  postId Int
  tagId  Int

  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Post {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  slug         String    @unique
  title        String
  desc         String
  img          String?
  views        Int       @default(0)
  isFeatured Boolean   @default(false) // üëà c·∫ßn n·∫øu c√≥ `featured`
  seoTitle     String?
  seoDesc      String?
  seoKeywords  String?
  userEmail    String
  user         User      @relation(fields: [userEmail], references: [email])
  comments     Comment[]
  tags         PostTag[]
  categories   PostCategory[]  // üëà Quan h·ªá nhi·ªÅu-nhi·ªÅu v·ªõi Category
}

model Category {
  id        Int             @id @default(autoincrement())
  slug      String          @unique
  title     String
  img       String?
  posts     PostCategory[]  // üëà Quan h·ªá ng∆∞·ª£c l·∫°i v·ªõi Post
}

model PostCategory {
  postId     Int
  categoryId Int

  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
}


model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}
